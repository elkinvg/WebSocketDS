/*----- PROTECTED REGION ID(WebSocketDS.h) ENABLED START -----*/
//=============================================================================
//
// file :        WebSocketDS.h
//
// description : Include file for the WebSocketDS class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef WebSocketDS_H
#define WebSocketDS_H

#include <tango.h>
#ifdef _WIN32
#define WINVER 0x0A00
#endif

#include "GroupOrDeviceForWs.h"

#include <chrono>

#include "common.h"


/*----- PROTECTED REGION END -----*/	//	WebSocketDS.h

/**
 *  WebSocketDS class description:
 *    WebSocket access to tango device-server attributes.
 *    
 *    Configuration should be done via properties:
 *    
 *    Port - port to listen incoming ws connections;
 *    DeviceServer - tango id of a required device server;
 *    Attributes - list of required DS attributes, you wish to read via WS;
 *    Commands - list of required DS commandes, you wish to executed via WS;
 *    AuthDS - Tango web authentication device server (TangoWebAuth ) name.
 *    Secure - It will be used wss connection (websocket secure). (true if you want)
 *    Certificate - Certificate file name (crt) with full path (if Secure = true)
 *    Key - Private key file name (if Secure = true)
 *    
 *    Then you should set polling to the UpdateData command. (1000 means that all connected clients would read attributes once per second).
 *    
 *    Data format: JSON string with array of attrubute objects {atrrtibute name, attribute value, quality, timestamp};
 *    
 *    if you want to record in the logs, define #USELOG in makefile.
 *    The database (defined in AuthDS) must contain a table `command_history` with columns:
 *        // id - autoincrement
 *        // argin[0] = timestamp_string UNIX_TIMESTAMP
 *        // argin[1] = login
 *        // argin[2] = deviceName
 *        // argin[3] = IP
 *        // argin[4] = commandName
 *        // argin[5] = commandJson
 *        // argin[6] = statusBool
 */

namespace WebSocketDS_ns
{
/*----- PROTECTED REGION ID(WebSocketDS::Additional Class Declarations) ENABLED START -----*/
class UserControl;
class WSThread;

class GroupOrDeviceForWs;
//class DeviceForWs;
//class GroupForWs;



/*----- PROTECTED REGION END -----*/	//	WebSocketDS::Additional Class Declarations

class WebSocketDS : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(WebSocketDS::Data Members) ENABLED START -----*/

private:
    WSThread *wsThread;
    std::unique_ptr<GroupOrDeviceForWs> groupOrDevice;


    bool _isGroup{false};
    bool _isLogActive {false};
    bool _isShortAttr{true};
    TYPE_OF_IDENT typeOfIdent{TYPE_OF_IDENT::SIMPLE};

    std::chrono::seconds timeFromUpdateData;
public:
    std::map<std::string, Tango::CommandInfo> accessibleCommandInfo;
    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::Data Members

//	Device property data members
public:
	//	DeviceServer:	Using DeviceServer name
	string	deviceServer;
	//	Port:	Using port of WebSocket
	Tango::DevShort	port;
	//	Attributes:	Attributes list
	vector<string>	attributes;
	//	Commands:	Commandes list from using DS
	vector<string>	commands;
	//	PipeName:	Name of DevicePipe for reading. [0]
	//  When using GROUP, the DevicePipe name must be the same for all devices.
	//  If you want to set properties for specific attributes, add them in the format ``NameAttr;property``
	vector<string>	pipeName;
	//	Secure:	Shall we use SSL encryption?
	//  It will be used wss connection (websocket secure)
	Tango::DevBoolean	secure;
	//	Certificate:	Certificate file name (crt) with path
	//  example: /etc/ssl/certs/ssl-cert-snakeoil.pem
	string	certificate;
	//	Key:	Private key file name
	//  Example: /etc/ssl/private/ssl-cert-snakeoil.key
	string	key;
	//	AuthDS:	Tango web authentication device server (TangoWebAuth ) name.
	string	authDS;
	//	MaxNumberOfConnections:	Maximum number of WebSocket connections (clients)
	//  (If == 0) An unlimited number of connections
	Tango::DevUShort	maxNumberOfConnections;
	//	MaximumBufferSize:	The maximum size of the buffer (in KiB) after which the socket is closed
	//  Value must be from 1 to 10000
	Tango::DevUShort	maximumBufferSize;
	//	ResetTimestampDifference:	Timestamp difference after which reloads the server. (seconds)
	//  Default and MinValue = 60
	Tango::DevUShort	resetTimestampDifference;
	//	Options:	Options for device.
	//  Format of options:
	//  	opt1;opt2=val
	string	options;

//	Attribute data members
public:
	Tango::DevString	*attr_JSON_read;
	Tango::DevULong	*attr_TimestampDiff_read;
	Tango::DevULong	*attr_NumberOfConnections_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WebSocketDS(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WebSocketDS(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	WebSocketDS(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~WebSocketDS() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : WebSocketDS::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute JSON related methods
 *	Description: 
 *
 *	Data type:	Tango::DevString
 *	Attr type:	Scalar
 */
	virtual void read_JSON(Tango::Attribute &attr);
	virtual bool is_JSON_allowed(Tango::AttReqType type);
/**
 *	Attribute TimestampDiff related methods
 *	Description: The difference between the timestamps from UpdateData and CheckPoll
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_TimestampDiff(Tango::Attribute &attr);
	virtual bool is_TimestampDiff_allowed(Tango::AttReqType type);
/**
 *	Attribute NumberOfConnections related methods
 *	Description: Number of WS clients
 *
 *	Data type:	Tango::DevULong
 *	Attr type:	Scalar
 */
	virtual void read_NumberOfConnections(Tango::Attribute &attr);
	virtual bool is_NumberOfConnections_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : WebSocketDS::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command On related method
	 *	Description: 
	 *
	 */
	virtual void on();
	virtual bool is_On_allowed(const CORBA::Any &any);
	/**
	 *	Command Off related method
	 *	Description: 
	 *
	 */
	virtual void off();
	virtual bool is_Off_allowed(const CORBA::Any &any);
	/**
	 *	Command UpdateData related method
	 *	Description: 
	 *
	 */
	virtual void update_data();
	virtual bool is_UpdateData_allowed(const CORBA::Any &any);
	/**
	 *	Command SendCommand related method
	 *	Description: Command for sending command to device from property.
	 *
	 *	@param argin input argument must be in JSON. Command must be included to device property ``Commands``
	 *               {``command`` : ``nameOfCommand``, ``argin`` : [``1``,``2``,``3``]}
	 *               OR
	 *               {``command`` : ``nameOfCommand``, ``argin`` : ``1``}
	 *	@returns Output in JSON.
	 */
	virtual Tango::DevString send_command(Tango::DevString argin);
	virtual bool is_SendCommand_allowed(const CORBA::Any &any);
	/**
	 *	Command Reset related method
	 *	Description: Restart websocket server
	 *
	 */
	virtual void reset();
	virtual bool is_Reset_allowed(const CORBA::Any &any);
	/**
	 *	Command CheckPoll related method
	 *	Description: 
	 *
	 */
	virtual void check_poll();
	virtual bool is_CheckPoll_allowed(const CORBA::Any &any);
	/**
	 *	Command SendCommandBin related method
	 *	Description: Command for sending command to device from property.
	 *
	 *	@param argin input argument must be in JSON. Command must be included to device property ``Commands``
	 *               {``command`` : ``nameOfCommand``, ``argin`` : [``1``,``2``,``3``]}
	 *               OR
	 *               {``command`` : ``nameOfCommand``, ``argin`` : ``1``}
	 *	@returns Output in binary data
	 */
	virtual Tango::DevVarCharArray *send_command_bin(Tango::DevString argin);
	virtual bool is_SendCommandBin_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : WebSocketDS::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(WebSocketDS::Additional Method prototypes) ENABLED START -----*/
public:
    string readPipeFromDeviceOrGroup(const std::map<string, string> &pipeConf);
    // From Property "Options" of tango_device
    // format opt1;opt2=val;opt3
    OUTPUT_DATA_TYPE check_type_of_data(const string& commandName);
    // opt = tident=[smpl or rndid] example tident=rndid
    TYPE_OF_IDENT check_type_of_ident(){ return typeOfIdent; };
    // opt = group
    bool isGroup() { return _isGroup; };
    // opt = uselog
    bool isLogActive() { return _isLogActive; };
    // opt = notshrtatt
    bool isShortAttr() {return _isShortAttr; };

private:
    void reInitDevice();
    void fromException(Tango::DevFailed &e, string func);

    bool initDeviceServer();
    bool initWsThread();


#ifdef TESTFAIL
    void sendLogToFile();
#endif

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::Additional Method prototypes
};

/*----- PROTECTED REGION ID(WebSocketDS::Additional Classes Definitions) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	WebSocketDS::Additional Classes Definitions

}	//	End of namespace

#endif   //	WebSocketDS_H
