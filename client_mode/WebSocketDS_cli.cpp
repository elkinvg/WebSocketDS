/*----- PROTECTED REGION ID(WebSocketDS_cli.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        WebSocketDS_cli.cpp
//
// description : C++ source for the WebSocketDS_cli class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               WebSocketDS_cli are implemented in this file.
//
// project :     WebSocket access to tango device-server attributes, pipes and commands
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <WebSocketDS_cli.h>
#include <WebSocketDS_cliClass.h>

/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli.cpp

/**
 *  WebSocketDS_cli class description:
 *    WebSocket access to tango device-server attributes.
 *    Server mode
 *    Configuration should be done via properties:
 *    
 *    Port - port to listen incoming ws connections;
 *    DeviceServer - tango id of a required device server;
 *    Attributes - list of required DS attributes, you wish to read via WS;
 *    AuthDS - Tango web authentication device server (TangoWebAuth ) name.
 *    Secure - It will be used wss connection (websocket secure). (true if you want)
 *    Certificate - Certificate file name (crt) with full path (if Secure = true)
 *    Key - Private key file name (if Secure = true)
 *    Options - Various options for the device server
 *    
 *    Then you should set polling to the UpdateData command. (1000 means that all connected clients would read attributes once per second).
 *    
 *    Data format: JSON string with array of attrubute objects {atrrtibute name, attribute value, quality, timestamp};
 *    
 *    if you want to record in the logs, define uselog in Property ``Options``.
 *    The database (defined in AuthDS) must contain a table `command_history` with columns:
 *        // id - autoincrement
 *        // argin[0] = timestamp_string UNIX_TIMESTAMP
 *        // argin[1] = login
 *        // argin[2] = deviceName
 *        // argin[3] = IP
 *        // argin[4] = commandName
 *        // argin[5] = commandJson
 *        // argin[6] = statusBool
 *        // argin[7] = isGroup
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace WebSocketDS_ns
{
/*----- PROTECTED REGION ID(WebSocketDS_cli::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS_cli::WebSocketDS_cli()
 *	Description : Constructors for a Tango device
 *                implementing the classWebSocketDS_cli
 */
//--------------------------------------------------------
WebSocketDS_cli::WebSocketDS_cli(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(WebSocketDS_cli::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::constructor_1
}
//--------------------------------------------------------
WebSocketDS_cli::WebSocketDS_cli(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(WebSocketDS_cli::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::constructor_2
}
//--------------------------------------------------------
WebSocketDS_cli::WebSocketDS_cli(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(WebSocketDS_cli::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS_cli::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void WebSocketDS_cli::delete_device()
{
	DEBUG_STREAM << "WebSocketDS_cli::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(WebSocketDS_cli::delete_device) ENABLED START -----*/
    delete wsTangoConn;
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS_cli::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void WebSocketDS_cli::init_device()
{
	DEBUG_STREAM << "WebSocketDS_cli::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(WebSocketDS_cli::init_device_before) ENABLED START -----*/
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(WebSocketDS_cli::init_device) ENABLED START -----*/
	
    set_state(Tango::ON);
    set_status("Device is On");

    wsTangoConn = new WSTangoConnCli(this);
	
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::init_device
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS_cli::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void WebSocketDS_cli::get_device_property()
{
	/*----- PROTECTED REGION ID(WebSocketDS_cli::get_device_property_before) ENABLED START -----	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Port"));
	dev_prop.push_back(Tango::DbDatum("Secure"));
	dev_prop.push_back(Tango::DbDatum("Certificate"));
	dev_prop.push_back(Tango::DbDatum("Key"));
	dev_prop.push_back(Tango::DbDatum("AuthDS"));
	dev_prop.push_back(Tango::DbDatum("Options"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on WebSocketDS_cliClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		WebSocketDS_cliClass	*ds_class =
			(static_cast<WebSocketDS_cliClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Port from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  port;
		else {
			//	Try to initialize Port from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  port;
		}
		//	And try to extract Port value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  port;

		//	Try to initialize Secure from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  secure;
		else {
			//	Try to initialize Secure from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  secure;
		}
		//	And try to extract Secure value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  secure;

		//	Try to initialize Certificate from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  certificate;
		else {
			//	Try to initialize Certificate from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  certificate;
		}
		//	And try to extract Certificate value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  certificate;

		//	Try to initialize Key from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  key;
		else {
			//	Try to initialize Key from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  key;
		}
		//	And try to extract Key value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  key;

		//	Try to initialize AuthDS from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  authDS;
		else {
			//	Try to initialize AuthDS from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  authDS;
		}
		//	And try to extract AuthDS value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  authDS;

		//	Try to initialize Options from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  options;
		else {
			//	Try to initialize Options from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  options;
		}
		//	And try to extract Options value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  options;

	}

	/*----- PROTECTED REGION ID(WebSocketDS_cli::get_device_property_after) ENABLED START -----*/
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS_cli::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void WebSocketDS_cli::always_executed_hook()
{
	DEBUG_STREAM << "WebSocketDS_cli::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(WebSocketDS_cli::always_executed_hook) ENABLED START -----*/
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS_cli::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void WebSocketDS_cli::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "WebSocketDS_cli::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(WebSocketDS_cli::read_attr_hardware) ENABLED START -----*/
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : WebSocketDS_cli::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void WebSocketDS_cli::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(WebSocketDS_cli::add_dynamic_attributes) ENABLED START -----*/
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS_cli::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void WebSocketDS_cli::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(WebSocketDS_cli::add_dynamic_commands) ENABLED START -----*/
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::add_dynamic_commands
}

/*----- PROTECTED REGION ID(WebSocketDS_cli::namespace_ending) ENABLED START -----*/
/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::namespace_ending
} //	namespace
