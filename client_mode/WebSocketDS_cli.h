/*----- PROTECTED REGION ID(WebSocketDS_cli.h) ENABLED START -----*/
//=============================================================================
//
// file :        WebSocketDS_cli.h
//
// description : Include file for the WebSocketDS_cli class
//
// project :     WebSocket access to tango device-server attributes, pipes and commands
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef WebSocketDS_cli_H
#define WebSocketDS_cli_H

#include <tango.h>
#include <WSTangoConnCli.h>


/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli.h

/**
 *  WebSocketDS_cli class description:
 *    WebSocket access to tango device-server attributes.
 *    Server mode
 *    Configuration should be done via properties:
 *    
 *    Port - port to listen incoming ws connections;
 *    DeviceServer - tango id of a required device server;
 *    Attributes - list of required DS attributes, you wish to read via WS;
 *    AuthDS - Tango web authentication device server (TangoWebAuth ) name.
 *    Secure - It will be used wss connection (websocket secure). (true if you want)
 *    Certificate - Certificate file name (crt) with full path (if Secure = true)
 *    Key - Private key file name (if Secure = true)
 *    Options - Various options for the device server
 *    
 *    Then you should set polling to the UpdateData command. (1000 means that all connected clients would read attributes once per second).
 *    
 *    Data format: JSON string with array of attrubute objects {atrrtibute name, attribute value, quality, timestamp};
 *    
 *    if you want to record in the logs, define uselog in Property ``Options``.
 *    The database (defined in AuthDS) must contain a table `command_history` with columns:
 *        // id - autoincrement
 *        // argin[0] = timestamp_string UNIX_TIMESTAMP
 *        // argin[1] = login
 *        // argin[2] = deviceName
 *        // argin[3] = IP
 *        // argin[4] = commandName
 *        // argin[5] = commandJson
 *        // argin[6] = statusBool
 *        // argin[7] = isGroup
 */

namespace WebSocketDS_ns
{
/*----- PROTECTED REGION ID(WebSocketDS_cli::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::Additional Class Declarations

class WebSocketDS_cli : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(WebSocketDS_cli::Data Members) ENABLED START -----*/

    WSTangoConnCli* wsTangoConn;

/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::Data Members

//	Device property data members
public:
	//	Port:	Using port of WebSocket
	Tango::DevShort	port;
	//	Secure:	Shall we use SSL encryption?
	//  set true, for secure wss connection, otherwise false;
	Tango::DevBoolean	secure;
	//	Certificate:	full path to the certificate in use (if Secure = true)
	//  example: /etc/ssl/certs/ssl-cert-snakeoil.pem
	string	certificate;
	//	Key:	full path to the file in use with Private key (if Secure = true)
	//  Example: /etc/ssl/private/ssl-cert-snakeoil.key
	string	key;
	//	AuthDS:	Tango web authentication device server (TangoWebAuth ) name.
	//  responsible for user authentication in case of commands execution
	string	authDS;
	//	Options:	Options for device.
	//  Format of options:
	//  	nameOfOption or nameOfOption=value
	vector<string>	options;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WebSocketDS_cli(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WebSocketDS_cli(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	WebSocketDS_cli(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~WebSocketDS_cli() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : WebSocketDS_cli::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : WebSocketDS_cli::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:


	//--------------------------------------------------------
	/**
	 *	Method      : WebSocketDS_cli::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(WebSocketDS_cli::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes

/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::Additional Method prototypes
};

/*----- PROTECTED REGION ID(WebSocketDS_cli::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	WebSocketDS_cli::Additional Classes Definitions

}	//	End of namespace

#endif   //	WebSocketDS_cli_H
