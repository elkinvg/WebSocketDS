/*----- PROTECTED REGION ID(WebSocketDS.h) ENABLED START -----*/
//=============================================================================
//
// file :        WebSocketDS.h
//
// description : Include file for the WebSocketDS class
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef WebSocketDS_H
#define WebSocketDS_H

#include <tango.h>

#include "WSTangoConnSer.h"

/*----- PROTECTED REGION END -----*/	//	WebSocketDS.h

/**
 *  WebSocketDS class description:
 *    WebSocket access to tango device-server attributes.
 *    Server mode
 *    Configuration should be done via properties:
 *    
 *    Port - port to listen incoming ws connections;
 *    DeviceServer - tango id of a required device server;
 *    Attributes - list of required DS attributes, you wish to read via WS;
 *    AuthDS - Tango web authentication device server (TangoWebAuth ) name.
 *    Secure - It will be used wss connection (websocket secure). (true if you want)
 *    Certificate - Certificate file name (crt) with full path (if Secure = true)
 *    Key - Private key file name (if Secure = true)
 *    Options - Various options for the device server
 *    
 *    Then you should set polling to the UpdateData command. (1000 means that all connected clients would read attributes once per second).
 *    
 *    Data format: JSON string with array of attrubute objects {atrrtibute name, attribute value, quality, timestamp};
 *    
 *    if you want to record in the logs, define uselog in Property ``Options``.
 *    The database (defined in AuthDS) must contain a table `command_history` with columns:
 *        // id - autoincrement
 *        // argin[0] = timestamp_string UNIX_TIMESTAMP
 *        // argin[1] = login
 *        // argin[2] = deviceName
 *        // argin[3] = IP
 *        // argin[4] = commandName
 *        // argin[5] = commandJson
 *        // argin[6] = statusBool
 *        // argin[7] = isGroup
 */

namespace WebSocketDS_ns
{
/*----- PROTECTED REGION ID(WebSocketDS::Additional Class Declarations) ENABLED START -----*/
//    class WSTangoConn;


/*----- PROTECTED REGION END -----*/	//	WebSocketDS::Additional Class Declarations

class WebSocketDS : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(WebSocketDS::Data Members) ENABLED START -----*/

private:
    WSTangoConnSer* wsTangoConn;

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::Data Members

//	Device property data members
public:
	//	Port:	Using port of WebSocket
	Tango::DevShort	port;
	//	DeviceServer:	Using DeviceServer name 
	//  or  a device name pattern (e.g. domain_* / family/ member_*) for communicate with a group of devices.
	//  Used only if any server mode is selected.
	string	deviceServer;
	//	Attributes:	A list of device attributes you want to read, if reading all attributes is required, add __all_attrs__ (not operational in group mode); 
	//  Used only if any server mode is selected.
	vector<string>	attributes;
	//	PipeName:	Name of DevicePipe for reading. [0]
	//  When using GROUP, the DevicePipe name must be the same for all devices.
	//  If you want to set properties for specific attributes, add them in the format ``NameAttr;property``
	//  Used only if any server mode is selected.
	vector<string>	pipeName;
	//	Secure:	Shall we use SSL encryption?
	//  set true, for secure wss connection, otherwise false;
	Tango::DevBoolean	secure;
	//	Certificate:	full path to the certificate in use (if Secure = true)
	//  example: /etc/ssl/certs/ssl-cert-snakeoil.pem
	string	certificate;
	//	Key:	full path to the file in use with Private key (if Secure = true)
	//  Example: /etc/ssl/private/ssl-cert-snakeoil.key
	string	key;
	//	AuthDS:	Tango web authentication device server (TangoWebAuth ) name.
	//  responsible for user authentication in case of commands execution
	string	authDS;
	//	Options:	Options for device.
	//  Format of options:
	//  	nameOfOption or nameOfOption=value
	vector<string>	options;
	//	list_subscr_event_change:	List of subscriptions to change events
	vector<string>	list_subscr_event_change;
	//	list_subscr_event_periodic:	List of subscriptions to periodic events
	vector<string>	list_subscr_event_periodic;
	//	list_subscr_event_user:	List of subscriptions to user events
	vector<string>	list_subscr_event_user;
	//	list_subscr_event_archive:	List of subscriptions to archive events
	vector<string>	list_subscr_event_archive;


//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WebSocketDS(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	WebSocketDS(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	WebSocketDS(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~WebSocketDS() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : WebSocketDS::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);


	//--------------------------------------------------------
	/**
	 *	Method      : WebSocketDS::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command UpdateData related method
	 *	Description: 
	 *
	 */
	virtual void update_data();
	virtual bool is_UpdateData_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : WebSocketDS::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(WebSocketDS::Additional Method prototypes) ENABLED START -----*/


    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::Additional Method prototypes
};

/*----- PROTECTED REGION ID(WebSocketDS::Additional Classes Definitions) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	WebSocketDS::Additional Classes Definitions

}	//	End of namespace

#endif   //	WebSocketDS_H
