/*----- PROTECTED REGION ID(WebSocketDS.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        WebSocketDS.cpp
//
// description : C++ source for the WebSocketDS class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               WebSocketDS are implemented in this file.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <WebSocketDS.h>
#include <WebSocketDSClass.h>


/*----- PROTECTED REGION END -----*/	//	WebSocketDS.cpp

/**
 *  WebSocketDS class description:
 *    WebSocket access to tango device-server attributes.
 *    Server mode
 *    Configuration should be done via properties:
 *    
 *    Port - port to listen incoming ws connections;
 *    DeviceServer - tango id of a required device server;
 *    Attributes - list of required DS attributes, you wish to read via WS;
 *    AuthDS - Tango web authentication device server (TangoWebAuth ) name.
 *    Secure - It will be used wss connection (websocket secure). (true if you want)
 *    Certificate - Certificate file name (crt) with full path (if Secure = true)
 *    Key - Private key file name (if Secure = true)
 *    Options - Various options for the device server
 *    
 *    Then you should set polling to the UpdateData command. (1000 means that all connected clients would read attributes once per second).
 *    
 *    Data format: JSON string with array of attrubute objects {atrrtibute name, attribute value, quality, timestamp};
 *    
 *    if you want to record in the logs, define uselog in Property ``Options``.
 *    The database (defined in AuthDS) must contain a table `command_history` with columns:
 *        // id - autoincrement
 *        // argin[0] = timestamp_string UNIX_TIMESTAMP
 *        // argin[1] = login
 *        // argin[2] = deviceName
 *        // argin[3] = IP
 *        // argin[4] = commandName
 *        // argin[5] = commandJson
 *        // argin[6] = statusBool
 *        // argin[7] = isGroup
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  UpdateData    |  update_data
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//================================================================

namespace WebSocketDS_ns
{
/*----- PROTECTED REGION ID(WebSocketDS::namespace_starting) ENABLED START -----*/

//    static initializations

/*----- PROTECTED REGION END -----*/	//	WebSocketDS::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS::WebSocketDS()
 *	Description : Constructors for a Tango device
 *                implementing the classWebSocketDS
 */
//--------------------------------------------------------
WebSocketDS::WebSocketDS(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(WebSocketDS::constructor_1) ENABLED START -----*/
    init_device();

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::constructor_1
}
//--------------------------------------------------------
WebSocketDS::WebSocketDS(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(WebSocketDS::constructor_2) ENABLED START -----*/
    init_device();

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::constructor_2
}
//--------------------------------------------------------
WebSocketDS::WebSocketDS(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(WebSocketDS::constructor_3) ENABLED START -----*/
    init_device();

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void WebSocketDS::delete_device()
{
	DEBUG_STREAM << "WebSocketDS::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(WebSocketDS::delete_device) ENABLED START -----*/
    if (wsTangoConn != nullptr) {
        delete wsTangoConn;
    }
    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::delete_device
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void WebSocketDS::init_device()
{
	DEBUG_STREAM << "WebSocketDS::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(WebSocketDS::init_device_before) ENABLED START -----*/

    //    Initialization before get_device_property() call

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	/*----- PROTECTED REGION ID(WebSocketDS::init_device) ENABLED START -----*/

    try {
        // Эта опция используется в старой версии
        // Атрибут удаляется из списка
        auto newEnd = std::remove_if(attributes.begin(), attributes.end(), [](const string& attr) {
            return (attr.find(";onlywrt") != string::npos);
        });

        attributes.erase(newEnd, attributes.end());

        list_subscr_event_change.erase(std::remove(list_subscr_event_change.begin(), list_subscr_event_change.end(), ""), list_subscr_event_change.end());

        list_subscr_event_periodic.erase(std::remove(list_subscr_event_periodic.begin(), list_subscr_event_periodic.end(), ""), list_subscr_event_periodic.end());

        list_subscr_event_user.erase(std::remove(list_subscr_event_user.begin(), list_subscr_event_user.end(), ""), list_subscr_event_user.end());

        list_subscr_event_archive.erase(std::remove(list_subscr_event_archive.begin(), list_subscr_event_archive.end(), ""), list_subscr_event_archive.end());

        wsTangoConn = new WSTangoConnSer(this);
    }
    catch (Tango::DevFailed &e) {
        set_state(Tango::FAULT);
        set_status("Couldn't init wsTangoConn");
        return;
    }
    catch (std::exception &e) {
        set_state(Tango::FAULT);
        set_status(e.what());
        return;
    }
    catch (...) {
        set_state(Tango::FAULT);
        set_status("Unknown Exception from init");
        return;
    }

    set_state(Tango::ON);
    set_status("The listening server is running");


    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::init_device
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void WebSocketDS::get_device_property()
{
	/*----- PROTECTED REGION ID(WebSocketDS::get_device_property_before) ENABLED START -----*/

    //    Initialize property data members
    //port = 9002;

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("Port"));
	dev_prop.push_back(Tango::DbDatum("DeviceServer"));
	dev_prop.push_back(Tango::DbDatum("Attributes"));
	dev_prop.push_back(Tango::DbDatum("PipeName"));
	dev_prop.push_back(Tango::DbDatum("Secure"));
	dev_prop.push_back(Tango::DbDatum("Certificate"));
	dev_prop.push_back(Tango::DbDatum("Key"));
	dev_prop.push_back(Tango::DbDatum("AuthDS"));
	dev_prop.push_back(Tango::DbDatum("Options"));
	dev_prop.push_back(Tango::DbDatum("list_subscr_event_change"));
	dev_prop.push_back(Tango::DbDatum("list_subscr_event_periodic"));
	dev_prop.push_back(Tango::DbDatum("list_subscr_event_user"));
	dev_prop.push_back(Tango::DbDatum("list_subscr_event_archive"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on WebSocketDSClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		WebSocketDSClass	*ds_class =
			(static_cast<WebSocketDSClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize Port from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  port;
		else {
			//	Try to initialize Port from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  port;
		}
		//	And try to extract Port value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  port;

		//	Try to initialize DeviceServer from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  deviceServer;
		else {
			//	Try to initialize DeviceServer from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  deviceServer;
		}
		//	And try to extract DeviceServer value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  deviceServer;

		//	Try to initialize Attributes from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  attributes;
		else {
			//	Try to initialize Attributes from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  attributes;
		}
		//	And try to extract Attributes value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  attributes;

		//	Try to initialize PipeName from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  pipeName;
		else {
			//	Try to initialize PipeName from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  pipeName;
		}
		//	And try to extract PipeName value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pipeName;

		//	Try to initialize Secure from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  secure;
		else {
			//	Try to initialize Secure from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  secure;
		}
		//	And try to extract Secure value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  secure;

		//	Try to initialize Certificate from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  certificate;
		else {
			//	Try to initialize Certificate from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  certificate;
		}
		//	And try to extract Certificate value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  certificate;

		//	Try to initialize Key from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  key;
		else {
			//	Try to initialize Key from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  key;
		}
		//	And try to extract Key value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  key;

		//	Try to initialize AuthDS from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  authDS;
		else {
			//	Try to initialize AuthDS from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  authDS;
		}
		//	And try to extract AuthDS value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  authDS;

		//	Try to initialize Options from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  options;
		else {
			//	Try to initialize Options from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  options;
		}
		//	And try to extract Options value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  options;

		//	Try to initialize list_subscr_event_change from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  list_subscr_event_change;
		else {
			//	Try to initialize list_subscr_event_change from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  list_subscr_event_change;
		}
		//	And try to extract list_subscr_event_change value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  list_subscr_event_change;

		//	Try to initialize list_subscr_event_periodic from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  list_subscr_event_periodic;
		else {
			//	Try to initialize list_subscr_event_periodic from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  list_subscr_event_periodic;
		}
		//	And try to extract list_subscr_event_periodic value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  list_subscr_event_periodic;

		//	Try to initialize list_subscr_event_user from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  list_subscr_event_user;
		else {
			//	Try to initialize list_subscr_event_user from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  list_subscr_event_user;
		}
		//	And try to extract list_subscr_event_user value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  list_subscr_event_user;

		//	Try to initialize list_subscr_event_archive from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  list_subscr_event_archive;
		else {
			//	Try to initialize list_subscr_event_archive from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  list_subscr_event_archive;
		}
		//	And try to extract list_subscr_event_archive value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  list_subscr_event_archive;

	}

	/*----- PROTECTED REGION ID(WebSocketDS::get_device_property_after) ENABLED START -----*/

    //    Check device property data members init

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void WebSocketDS::always_executed_hook()
{
	//DEBUG_STREAM << "WebSocketDS::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(WebSocketDS::always_executed_hook) ENABLED START -----*/

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : WebSocketDS::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void WebSocketDS::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "WebSocketDS::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(WebSocketDS::read_attr_hardware) ENABLED START -----*/
    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::read_attr_hardware
}


//--------------------------------------------------------
/**
 *	Method      : WebSocketDS::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void WebSocketDS::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(WebSocketDS::add_dynamic_attributes) ENABLED START -----*/
    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command UpdateData related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void WebSocketDS::update_data()
{
	DEBUG_STREAM << "WebSocketDS::UpdateData()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(WebSocketDS::update_data) ENABLED START -----*/
    if (!wsTangoConn->getConnectionStatus()) {
        delete wsTangoConn;
        wsTangoConn = nullptr;
        return;
    }
	
    wsTangoConn->update();
	
	/*----- PROTECTED REGION END -----*/	//	WebSocketDS::update_data
}
//--------------------------------------------------------
/**
 *	Method      : WebSocketDS::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void WebSocketDS::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(WebSocketDS::add_dynamic_commands) ENABLED START -----*/

    //    Add your own code to create and add dynamic commands if any

    /*----- PROTECTED REGION END -----*/	//	WebSocketDS::add_dynamic_commands
}

/*----- PROTECTED REGION ID(WebSocketDS::namespace_ending) ENABLED START -----*/

/*----- PROTECTED REGION END -----*/	//	WebSocketDS::namespace_ending
} //	namespace
